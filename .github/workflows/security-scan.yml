name: Security Scanning

on:
  schedule:
    - cron: '0 2 * * 1' # Weekly on Monday at 2 AM
  workflow_dispatch:
  push:
    branches: [main]
    paths:
      - 'package*.json'
      - 'Dockerfile*'
      - '.github/workflows/**'

env:
  DOCKER_REGISTRY: docker.io
  DOCKER_USERNAME: lks0426
  DOCKER_REPOSITORY: lks0426-portfolio

jobs:
  dependency-scan:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run npm audit
        run: npm audit --audit-level=moderate

      - name: Run Snyk security scan
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high

      - name: Upload Snyk results to GitHub Code Scanning
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: snyk.sarif

  container-scan:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          registry: ${{ env.DOCKER_REGISTRY }}
          username: ${{ env.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: Build Docker image for scanning
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.production
          tags: ${{ env.DOCKER_USERNAME }}/${{ env.DOCKER_REPOSITORY }}:security-scan
          push: false
          load: true

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.DOCKER_USERNAME }}/${{ env.DOCKER_REPOSITORY }}:security-scan
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Docker Scout scan
        uses: docker/scout-action@v1
        with:
          command: cves
          image: ${{ env.DOCKER_USERNAME }}/${{ env.DOCKER_REPOSITORY }}:security-scan
          only-severities: critical,high
          format: sarif
          output: scout-results.sarif

      - name: Upload Docker Scout results
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: scout-results.sarif

  secret-scan:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Run GitLeaks secret scan
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITLEAKS_LICENSE: ${{ secrets.GITLEAKS_LICENSE }}

      - name: Run TruffleHog secret scan
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: main
          head: HEAD
          extra_args: --debug --only-verified

  code-quality:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

      - name: CodeQL Analysis
        uses: github/codeql-action/init@v2
        with:
          languages: javascript

      - name: Autobuild
        uses: github/codeql-action/autobuild@v2

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v2

  infrastructure-scan:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Checkov IaC scan
        uses: bridgecrewio/checkov-action@master
        with:
          directory: .
          framework: cloudformation,terraform
          output_format: sarif
          output_file_path: checkov-results.sarif

      - name: Upload Checkov results
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: checkov-results.sarif

      - name: Run TFSec Terraform security scan
        uses: aquasecurity/tfsec-action@v1.0.0
        with:
          soft_fail: true

  security-report:
    needs: [dependency-scan, container-scan, secret-scan, code-quality, infrastructure-scan]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Generate security report
        run: |
          echo "# Security Scan Report" > security-report.md
          echo "Generated on: $(date)" >> security-report.md
          echo "" >> security-report.md
          
          if [ "${{ needs.dependency-scan.result }}" == "success" ]; then
            echo "✅ Dependency scan: PASSED" >> security-report.md
          else
            echo "❌ Dependency scan: FAILED" >> security-report.md
          fi
          
          if [ "${{ needs.container-scan.result }}" == "success" ]; then
            echo "✅ Container scan: PASSED" >> security-report.md
          else
            echo "❌ Container scan: FAILED" >> security-report.md
          fi
          
          if [ "${{ needs.secret-scan.result }}" == "success" ]; then
            echo "✅ Secret scan: PASSED" >> security-report.md
          else
            echo "❌ Secret scan: FAILED" >> security-report.md
          fi
          
          if [ "${{ needs.code-quality.result }}" == "success" ]; then
            echo "✅ Code quality: PASSED" >> security-report.md
          else
            echo "❌ Code quality: FAILED" >> security-report.md
          fi
          
          if [ "${{ needs.infrastructure-scan.result }}" == "success" ]; then
            echo "✅ Infrastructure scan: PASSED" >> security-report.md
          else
            echo "❌ Infrastructure scan: FAILED" >> security-report.md
          fi

      - name: Upload security report
        uses: actions/upload-artifact@v3
        with:
          name: security-report
          path: security-report.md

      - name: Create security issue on failure
        if: failure()
        uses: actions/github-script@v6
        with:
          script: |
            const issue = await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: '🔒 Security Scan Failures Detected',
              body: `
              ## Security Scan Results
              
              One or more security scans have failed. Please review the results:
              
              - Dependency scan: ${{ needs.dependency-scan.result }}
              - Container scan: ${{ needs.container-scan.result }}
              - Secret scan: ${{ needs.secret-scan.result }}
              - Code quality: ${{ needs.code-quality.result }}
              - Infrastructure scan: ${{ needs.infrastructure-scan.result }}
              
              **Workflow:** ${{ github.workflow }}
              **Run:** ${{ github.run_id }}
              **Triggered by:** ${{ github.event_name }}
              
              Please check the [Security tab](/${{ github.repository }}/security) for detailed results.
              `,
              labels: ['security', 'bug', 'high-priority']
            });

      - name: Notify security team
        if: failure()
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          webhook_url: ${{ secrets.SECURITY_SLACK_WEBHOOK }}
          text: |
            🔒 Security scan failures detected in ${{ github.repository }}
            Check the Security tab for details: https://github.com/${{ github.repository }}/security